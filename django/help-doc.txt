1. `django-admin startproject projectname` : create and initialize a new project with projectname
2. Initial files: 
    - __init__.py : Defines python module
    - wsgi.py and asgi.py : apache and web server
    - settings.py : django configuration
    - urls.py : routes web requests based on urls
3. Run the project for first time, 'python manage.py runserver'
4. To initialize a feature in django app:
    - 'python manage.py startapp appname' : 
5. To enable our app in django application, add appname to settings.py -> INSTALLED_APPS
6. Basic files in an app : 
    - apps.py : settings specific to current app
    - models.py : Data layer used to create database schema for Django queries
    - admin.py : Defines administrative interface
    - urls.py : url routing specific to current app
    - views.py : login and control flow for handeling requests and responses
    - tests.py : unit tests
    - migrations/ : files helpful in migration the django database
7. Various field types available for data model : 
    - CharField : Requires a 'max_length' attribute value
    - TextField
    - URLField
    - EmailField
    - DateTimeField
    - IntegerField
    - DecimalField
    - BooleanField
    - ForeignField
    - ManyToManyField
8. Migrations : Generate scripts to migrate models to database
    - Each database state is stored in migrations as consecutive sequence number
    - `python manage.py makemigrations` : Generates migration files for later use and store them in migrations folder
    - `python manage.py showmigrations` : 
    - `python manage.py migrate <appname> <number>` : 
        - Runs all the pending migrations stored in migrations folder
        - If appname is specified, then migrations will be run for specific app
        - if 'number' is specified, then that number of migration will be run
    - Unapplied migration : When migration file is created but not yet run
9. Admin interface:
    - `python manage.py createsuperuser` : Creates a superuser account for web application
    - username and password : mihawk : draculemihawk
10. Open interactive shell for django app
    - `python manage.py shell`
11. Querying db using ORM
    - from <appname>.models import <modelname> : Imports the model modelname in current python file
    - `<modelname>.objects.all()` : Returns list (QuerySet class) of all instances of this model
    - `<modelname>.objects.get(id=n)` : Returns nth instance of model modelname
12. Templates :
    - 'render' function looks for the template file in <appname>/templates
    - variables in template are enclosed in two curly braces : {{ variablename }}
    - template tag is enclosed in curly braces and % sign : {% tag %}
    - Template filer using pipe '|' symbol after a variable : {{ variablename | filter }}
    - For loops : 
        {% for pet in pets %} 
            <li> {{ pet.name }} </li>
        {% endfor %}
    - URL tag :
        - {% url 'home' %} : will generate url path for 'home.html'
        - {% url 'pet_detail' pet.id %} : will generate url path for 'pet_detail.html' + '/id/'
    - extends/block tags : 
        - {% extends 'basetemplate.html' %} : it will include the content of basetemplate.html file
                                                in current html file
        - {% block <blockname> %} {% endblock blockname %} : creates a placeholder tag that can be updated
                    by any html file that includes the template file
13. Adding static files to project:
    - add 'SETTINGFILES_DIRS = [<path to static files>]' in settings.py
    - To load this static files in an html, use '{% load static %}'
14. Adding database to admin interface
    - admin.py : 
        from .models import <ModelName>
        admin.site.register(ModelName)